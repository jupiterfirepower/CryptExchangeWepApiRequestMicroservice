apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-task
spec:
  params:
    - name: gitrepo
      type: object
      properties:
        url:
          type: string
  workspaces:
    - name: source
  steps:
    - name: git-clone
      image: alpine/git
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        mkdir -p src
        cd src
        git clone $(params.gitrepo.url) .
        ls -la
        cat dockerfile
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: show-readme
spec:
  description: Read and display README file.
  workspaces:
    - name: source
  steps:
    - name: read
      image: alpine:latest
      workingDir: $(workspaces.source.path)/src
      script: |
        #!/usr/bin/env sh
        cat README.md
---  
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: list-source
spec:
  workspaces:
    - name: source
  steps:
  - name: ls
    image: registry.access.redhat.com/ubi9/ubi-micro
    workingDir: $(workspaces.source.path)/src
    script: >
      ls
---  
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run-elixir-unit-tests
spec:
  workspaces:
    - name: source
  steps:
  - name: compile-and-run-elixir-tests
    image: elixir:alpine
    workingDir: $(workspaces.source.path)/src
    script: |
      #!/bin/sh

      apk update 
      apk upgrade
      apk --update add g++ make cmake libc-dev libgcc musl

      export MIX_ENV=prod
      rm -Rf _build
      rm -Rf .elixir-tools
      rm -Rf deps
      mix deps.get
      mix release

      mix test
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: compile-and-run-on-redhat
spec:
  workspaces:
    - name: source
  steps:
  - name: compile-and-run-elixir-tests-on-redhat-micro
    image: registry.access.redhat.com/ubi9/ubi-minimal
    workingDir: $(workspaces.source.path)/src
    env:
        - name: "LANG"
          value: "en_US.UTF-8"
        - name: "LANGUAGE"
          value: "en_US:en"
    script: |
      #!/bin/bash

      microdnf install -y glibc-langpack-en; sed -i 's/^LANG=.*/LANG="en_US.utf8"/' /etc/locale.conf
      set ENV LANG=en_US.utf8
      cat /etc/locale.conf

      microdnf --enablerepo="ubi-9-codeready-builder"
      
      rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
      rpm -ql epel-release
      microdnf repolist
    
      mkdir erliex && cd erliex

      microdnf install -y openssl openssl-devel

      curl -LO https://binaries2.erlang-solutions.com/centos/8/esl-erlang_26.2.1_1~centos~8_x86_64.rpm
      ls -la
      mv esl-erlang_26.2.1_1~centos~8_x86_64.rpm esl-erlang_26.2.1_1centos8_x86_64.rpm
      ls -la
      rpm -i esl-erlang_26.2.1_1centos8_x86_64.rpm

      curl -LO https://fedora.pkgs.org/39/fedora-updates-testing-x86_64/erlang-crypto-26.2.4-1.fc39.x86_64.rpm.html

      microdnf install -y esl-erlang
      microdnf install -y unzip
      microdnf install -y gcc binutils elfutils make perl

      microdnf install -y tar

      curl -LO https://www.openssl.org/source/openssl-1.1.1w.tar.gz
      tar xvf openssl-1.1.1w.tar.gz
      cd openssl-1.1*/
      ./config --prefix=/usr/local/openssl --openssldir=/usr/local/openssl
      make -j $(nproc)
      make install
      ldconfig

      tee /etc/profile.d/openssl.sh<<EOF
      export PATH=/usr/local/openssl/bin:\$PATH
      export LD_LIBRARY_PATH=/usr/local/openssl/lib:\$LD_LIBRARY_PATH
      EOF
      source /etc/profile.d/openssl.sh
      
      cd ..

      curl -LO https://github.com/elixir-lang/elixir/releases/download/v1.16.2/elixir-otp-26.zip

      unzip elixir-otp-26.zip
      cp -rf bin/* /usr/bin/
      cp -rf lib/* /lib/
      cp -rf man/* /usr/share/man/

      cd .. && rm -rf erliex/

      mix archive.install github hexpm/hex branch latest
      microdnf install -y erlang-crypto

      export MIX_ENV=prod
      rm -Rf _build
      rm -Rf .elixir-tools
      rm -Rf deps
      mix deps.get
      mix release

      mix test
---      
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
spec:
  params:
    - name: azure-container-registry-name
      description: Number of sides to the dice
      type: string
  workspaces:
    - name: source
  steps:
  - name: kaniko-image
    workingDir: $(workspaces.source.path)/src
    image: gcr.io/kaniko-project/executor:latest
    command:
        - /kaniko/executor
    #args: ["--dockerfile=dockerfile", "--context=.", "--destination=$(params.azure-container-registry-name).azurecr.io/cermicros-image:latest"]
    args:
        - --dockerfile=dockerfile
        - --context=.
        - --destination=$(params.azure-container-registry-name).azurecr.io/cermicros-image:latest
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: git-clone-read
spec:
  description: |
    This pipeline clones a git repo, then echoes the README file to the stdout.
  params:
    - name: gitrepo
      type: object
      properties:
        url:
          type: string
    - name: azure-container-registry-name
      description: Number of sides to the dice
      type: string
  workspaces:
    - name: shared-data
      description: |
        This workspace contains the cloned repo files, so they can be read by the
        next task.
  tasks:
    - name: fetch-source      
      taskRef:
        name: git-clone-task
      workspaces:
        - name: source
          workspace: shared-data
      params:
        - name: gitrepo
          value:
             url: $(params.gitrepo.url)
    - name: list-source-dir
      #runAfter: ["fetch-source"]
      runAfter:
        - fetch-source
      taskRef:
        name: list-source
      workspaces:
        - name: source
          workspace: shared-data
    - name: show-readme
      runAfter: ["fetch-source"]
      taskRef:
        name: show-readme
      workspaces:
        - name: source
          workspace: shared-data
    - name: compile-and-run-tests
      runAfter: ["fetch-source"]
      taskRef:
        name: run-elixir-unit-tests
      workspaces:
        - name: source
          workspace: shared-data
    - name: compile-on-redhat
      runAfter: ["fetch-source"]
      taskRef:
        name: compile-and-run-on-redhat
      workspaces:
        - name: source
          workspace: shared-data
    - name: image-kaniko
      runAfter: ["compile-and-run-tests"]
      taskRef:
        name: kaniko
      params:
        - name: azure-container-registry-name
          value: $(params.azure-container-registry-name)
      workspaces:
        - name: source
          workspace: shared-data
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  #generateName: git-clone-read-run-
  name: git-clone-read-run-1qwer
spec:
  pipelineRef:
    name: git-clone-read
  workspaces:
    - name: shared-data
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
  params:
    - name: gitrepo
      value:
        url: "https://github.com/jupiterfirepower/CryptExchangeWepApiRequestMicroservice"
    - name: azure-container-registry-name
      value: "cryptazuredevregistry"